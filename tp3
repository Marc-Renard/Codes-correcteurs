from sage.symbolic.integration.integral import *

sigma = 0.5
m=2

q=2**m

transition = [[0 for i in range(q)] for j in range(q)]

for x in range(2):
    for y in range(2):
        i = x + m*y # i = 0,2,1,3
        #(x_, y_) point reçu
        for x_ in range(m):
            for y_ in range(m):
                j = x_ + y_*m # j = 0,2,1,3
                x_min = (-oo if x_ == 0 else x_ - 0.5)
                x_max = (oo if x_ == m-1 else x_ + 0.5)
                y_min = (-oo if y_ == 0 else y_ - 0.5)
                y_max = (oo if y_ == m-1 else y_ + 0.5)
                transition[i][j] = float(numerical_integral( lambda t: (1/(sqrt(2*pi*sigma**2)))*exp((-1/(2*sigma**2))*(t-x)**2), x_min, x_max)[0] * numerical_integral( lambda t: (1/(sqrt(2*pi*sigma**2)))*exp((-1/(2*sigma**2))*(t-y)**2), y_min, y_max)[0] )




for j in range(q):
    print(transition[j])


from sage.coding.code_bounds import entropy, entropy_inverse
p_err = (1-transition[0][0])
print("Probabilité d'erreur :", p_err)
print("Capacité du canal vu comme canal symétrique :",float(1-entropy(p_err, q)))

step = 20
C_max = 0
P_Xmax = [0]*4
for p0 in range(step + 1):
    for p1 in range(step - p0 + 1):
        for p2 in range(step - p0 - p1 + 1):
            p3 = step - p0 -p1 -p2
            pX = [float(p0/step),float(p1/step),float(p2/step),float(p3/step)]
            
            pY = [0]*4
            pY[0] = float(sum([pX[x]*transition[x][0] for x in range(4)]))
            pY[1] = float(sum([pX[x]*transition[x][1] for x in range(4)]))
            pY[2] = float(sum([pX[x]*transition[x][2] for x in range(4)]))
            pY[3] = float(sum([pX[x]*transition[x][3] for x in range(4)]))
            
            HqY = -sum([(0 if pY[y] == 0 else float(pY[y]*log(pY[y],q))) for y in range(4)])
            HqY_X = sum([-pX[x]*sum([0 if transition[x][y] == 0 else float(transition[x][y] * log(transition[x][y],q)) for y in range(4)]) for x in range(4)])
            C = HqY - HqY_X
            if C > C_max:
                C_max = C
                P_Xmax = pX
print("Capacité QPSK :", C_max)
print("Distribution :", P_Xmax)

m1 = Matrix([[0b00, 0b11],[0b10,0b1]])
m2 = Matrix([[0b00,0b10],[0b01,0b11]])

#taux erreur binaire mapping m1
p_bin =0
for i in range(q):
    for j in range(q):
        a = m1[i//m, i%m]
        b = m1[y//m, y%m]
        p_bin += float(bin(a^^b).count("1")*transition[i][j]/(q*m))

print("Taux d'erreur binaire :", p_bin)


#taux erreur binaire mapping m2
p_bin =0
for i in range(q):
    for j in range(q):
        a = m2[i//m, i%m]
        b = m2[j//m, j%m]
        p_bin += float(bin(a^^b).count("1")*transition[i][j]/(q*m))

print("Taux d'erreur binaire :", p_bin)
